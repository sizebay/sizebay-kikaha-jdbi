#!/bin/sh

# FUNCTIONS
usage(){
  warn "Usage: $0 <apply|destroy|import|init|refresh>"
}

debug(){
  if [ ! "${DEBUG}" = "" ]; then
    echo "$@"
  fi
}

warn(){
  echo "$@" 1>&2
}

initialize_terraform(){
  echo "Configuring environment '$1'..."

  mkdir -p ${LOCAL_TERRAFORM_DIR}

  if [ -f ${LOCAL_TERRAFORM_DIR}/terraw.env ]; then
    CURRENT=$(cat ${LOCAL_TERRAFORM_DIR}/terraw.env)
    if [ -f ${LOCAL_TERRAFORM_DIR}/terraform.tfstate ]; then
      mv ${LOCAL_TERRAFORM_DIR}/terraform.tfstate ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$CURRENT
    fi
    if [ ! "$CURRENT" = "$1" ]; then
      if [ -f ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$1 ]; then
         mv ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$1 ${LOCAL_TERRAFORM_DIR}/terraform.tfstate
      fi
    fi
  fi

  echo "$1" > ${LOCAL_TERRAFORM_DIR}/terraw.env
  terraform init ${TF_OPTS_INIT} ${TF_SRCDIR}

  echo "Terraform was configured for '$1' environment." 
}

# VERIFICATIONS
if [ "$#" = "0" ]; then
  warn "No command defined"
  usage && exit 1
fi

if [ -f ./terraw.conf ]; then
  . terraw.conf
fi

CMD="$1"; shift
LOCAL_TERRAFORM_DIR=".terraform"

if [ ! "$CMD" = "init" ] && [ ! "$CMD" = "deploy" ]; then
  if [ ! -d "${LOCAL_TERRAFORM_DIR}" ]; then
     warn "Terraform not initialized. Aborting..."
     exit 3
  fi

  if [ ! -f "${LOCAL_TERRAFORM_DIR}/terraw.env" ]; then
     warn "This terraform project wasn't initialized by terraw."
     exit 4
  fi
  ENV=$(cat ${LOCAL_TERRAFORM_DIR}/terraw.env)
elif [ "$1" = "" ]; then
  warn "No deployment environment defined"
  warn "Usage: $0 <init|deploy> [ENV]"
  exit 1
else
  ENV=$1; shift
fi

if [ "$ENV" = "" ]; then
  warn "Could not find environment configuration."
  warn "Please ensure that you have properly initialized 'terraw'."
  warn "To initialize type: $0 init <ENV>"
  echo
  exit 6
fi

TF_SRCDIR=${TF_SRCDIR:-$(pwd)}
TF_VARS=${TF_VARS:-${TF_SRCDIR}/env-${ENV}.tfvars}
TF_BACKEND=${TF_BACKEND:-${TF_SRCDIR}/env-${ENV}-backend.tfvars}
TF_OPTS=${TF_OPTS:-}
TF_OPTS_INIT=${TF_OPTS_INIT:-}
TERRAFORM=$(command -v terraform)

if [ "$TERRAFORM" = "" ]; then
  warn "No 'terraform' binary found."
  exit 2
fi

if [ ! "${DEBUG}" = "" ]; then
  export TF_LOG=${DEBUG}
fi

if [ -f "${TF_VARS}" ]; then
  TF_OPTS="$TF_OPTS -var-file=${TF_VARS}"
  debug "Using '${TF_VARS}' as config file"
else
  debug "No config file found. Expected: $TF_VARS"
fi

if [ -f "${TF_BACKEND}" ]; then
  TF_OPTS_INIT="$TF_OPTS_INIT -backend-config=${TF_BACKEND}"
  debug "Using '${TF_BACKEND}' as backend config file"
else
  debug "No backend file found: $TF_BACKEND"
fi

# MAIN
case "$CMD" in
  deploy)
    $0 init $ENV || exit 50
    $0 apply     || exit 50
  ;;

  destroy)
    echo "Destroying environment '$ENV'"
    terraform destroy -auto-approve ${TF_OPTS} $@ ${TF_SRCDIR}
  ;;

  apply)
    echo "Apply changes into environment '$ENV'"
    terraform apply   -auto-approve ${TF_OPTS} $@ ${TF_SRCDIR}
  ;;

  plan)
    echo "Executing 'plan' defined for '$ENV'"
    terraform apply ${TF_OPTS} $@ ${TF_SRCDIR}
  ;;

  import)
    echo "Importing environment '$ENV'"
    terraform import  -auto-approve ${TF_OPTS} $@ ${TF_SRCDIR}
  ;;

  refresh)
    echo "Refreshing environment '$ENV'"
    terraform refresh ${TF_OPTS} $@ ${TF_SRCDIR}
  ;;

  init)   initialize_terraform $ENV ;;
  build)  warn 'Nothing to do here... for now!' ;;
  *)      usage && exit 1 ;;
esac
